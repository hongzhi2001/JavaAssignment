/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaassignment;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Acer
 */
public class PeopleAppointment extends javax.swing.JFrame {

    /**
     * Creates new form PeopleAppointment
     */
    public PeopleAppointment() {
        initComponents();
        Date m = new Date();
        Calendar cal = Calendar.getInstance();    
        cal.add(Calendar.DATE, 7);  
        m = cal.getTime();
        jDateChooser1.setMinSelectableDate(m);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        lblHealthFacility = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        btnConfirm = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        cbHF = new javax.swing.JComboBox<>();
        cbTime = new javax.swing.JComboBox<>();
        lblTitle = new javax.swing.JLabel();
        cboVaccine = new javax.swing.JComboBox<>();
        lblVaccine = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(700, 300));

        jPanel1.setBackground(new java.awt.Color(195, 215, 223));

        lblDate.setText("Date:");

        lblTime.setText("Time:");

        lblHealthFacility.setText("Health Facility:");

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        cbHF.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Setia City Convention Centre", "Sunway Pyramid Convention Centre", "Stadium Nasional Bukit Jalil", "Kuala Lumpur Convention Centre", "Axiata Arena Bukit Jalil", "Universiti Malaya(UM)" }));
        cbHF.setSelectedIndex(-1);
        cbHF.setToolTipText("");
        cbHF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHFActionPerformed(evt);
            }
        });

        cbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9:00", "9:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30" }));
        cbTime.setSelectedIndex(-1);

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblTitle.setText("Appointment");

        cboVaccine.setSelectedIndex(-1);
        cboVaccine.setToolTipText("");

        lblVaccine.setText("Vaccine:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnExit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConfirm))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDate)
                                    .addComponent(lblTime))
                                .addGap(63, 63, 63)
                                .addComponent(lblTitle))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(181, 181, 181)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblHealthFacility)
                                .addGap(128, 128, 128))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblVaccine)
                                .addGap(145, 145, 145)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboVaccine, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbHF, 0, 1, Short.MAX_VALUE)
                            .addComponent(cbTime, 0, 240, Short.MAX_VALUE))))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTime)
                    .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHealthFacility)
                    .addComponent(cbHF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVaccine)
                    .addComponent(cboVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(btnExit))
                .addGap(50, 50, 50))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 13, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
       SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
       int dos =1;
       
       if(jDateChooser1.getDate()==null || cbHF.getSelectedItem()==null || cbTime.getSelectedItem()==null){
           JOptionPane.showMessageDialog(this,"Please ensure all the information have valid input");
       } else{                    
           try{
               int size = JavaAssignment.login.getMyAppointment().size(); 
               if(size==0 || JavaAssignment.login.getMyAppointment().get(size-1).getStatus()==2 && JavaAssignment.login.getMyAppointment().get(size-1).getDos()==1){  
                   int id=1; 
                   for(int i=0; i<DataIO.allAppointment.size(); i++){
                        if(i<DataIO.allAppointment.get(i).getId()){
                            id = DataIO.allAppointment.get(i).getId()+1;
                        }else{
                            id = DataIO.allAppointment.size()+1;
                        }
                    }
                   String x1 = dateFormat.format(jDateChooser1.getDate());
                   String x2 = String.valueOf(cbTime.getSelectedItem());
                   int x3 = 0;             
                   People x4 = JavaAssignment.login;
                   Centre x5 =null;
                   for(int i=0; i<DataIO.allCentre.size(); i++){
                        if(cbHF.getSelectedItem().equals(DataIO.allCentre.get(i).getHealthFacility())){
                            x5 = DataIO.allCentre.get(i);
                        }                    
                    }
                    Vaccine x6=null;
                    
                    String centre = cbHF.getSelectedItem().toString();
                    String vaccine = cboVaccine.getSelectedItem().toString();
                    for(int i=0;i<DataIO.allVaccine.size();i++){
                        if(vaccine.equals(DataIO.allVaccine.get(i).getName()) && centre.equals(DataIO.allVaccine.get(i).getVaccineCentre().getHealthFacility())){
                            x6 = DataIO.allVaccine.get(i);
                        }
                    }
                   
                   boolean flag = true;
                        for(int i=0; i<DataIO.allAppointment.size(); i++){
                            Appointment x = DataIO.allAppointment.get(i);
                            if(x1.equals(x.getAppointmentDate()) 
                                    && x2.equals(x.getTime()) 
                                    && x5 == x.getAppointCentre()
                                    && x6 == x.getVaccine()){
                                flag = false;
                                JOptionPane.showMessageDialog(this,"This time slot is not available!");
                                break;
                            }
                        }
                        if(flag){                                              
                            Appointment z = new Appointment(id,x1,x2,x3,dos,x4,x5,x6);
                            DataIO.allAppointment.add(z);
                            JavaAssignment.login.getMyAppointment().add(z);
                            x5.getAllAppointment().add(z);
                            for (int i = 0; i < DataIO.allVaccine.size(); i++) {
                                if (x6 == DataIO.allVaccine.get(i)) {          
                                    x6.bookVaccine();
                                    JavaAssignment.login.updateVaccine(DataIO.allVaccine.get(i), x6);
                                    DataIO.write();
                                    jDateChooser1.setCalendar(null);                            
                                    cbHF.setSelectedIndex(-1);
                                    cbTime.setSelectedIndex(-1);
                                    JOptionPane.showMessageDialog(this,"Your appointment is submitted");
                                    break;
                                }
                            }
                        } 
               }else{
                    JOptionPane.showMessageDialog(this,"Sorry, You have booked an appointment!");
               }
           } catch(Exception e){
               JOptionPane.showMessageDialog(this,"Error");
             }
       }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        jDateChooser1.setCalendar(null);
        cbHF.setSelectedIndex(-1);
        cbTime.setSelectedIndex(-1);
        this.setVisible(false);
        JavaAssignment.h.setVisible(true);
    }//GEN-LAST:event_btnExitActionPerformed

    private void cbHFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHFActionPerformed
        String centre = String.valueOf(cbHF.getSelectedItem());
        cboVaccine.removeAllItems();
            for(int i=0;i<DataIO.allVaccine.size();i++){
                if(centre.equals(DataIO.allVaccine.get(i).getVaccineCentre().getHealthFacility())){
                    cboVaccine.addItem(DataIO.allVaccine.get(i).getName());;
                }
            }
        cboVaccine.setSelectedIndex(-1);
    }//GEN-LAST:event_cbHFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PeopleAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PeopleAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PeopleAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PeopleAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PeopleAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnExit;
    private javax.swing.JComboBox<String> cbHF;
    private javax.swing.JComboBox<String> cbTime;
    private javax.swing.JComboBox<String> cboVaccine;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblHealthFacility;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblVaccine;
    // End of variables declaration//GEN-END:variables
}
